/* Gloomy Caves */

Dungeon ELPURI_CAVE;
{
  Levels = 16;
  Description = "gloomy cave";
  ShortDescription = "GC";

  LevelDefault
  {
    FillSquare = solidterrain(GROUND), GNEISS earth;
    TunnelSquare = solidterrain(GROUND), 0;
    Size = 64, 36;
    Rooms = 10:30;
    Items = 25:50;
    GenerateMonsters = true;
    IsOnGround = false;
    TeamDefault = MONSTER_TEAM;
    LOSModifier = 16;
    IgnoreDefaultSpecialSquares = false;
    DifficultyBase = 50;
    DifficultyDelta = 10;
    MonsterAmountBase = 10;
    MonsterAmountDelta = 2;
    MonsterGenerationIntervalBase = 140;
    MonsterGenerationIntervalDelta = -10;
    CanGenerateBone = true;
    ItemMinPriceBase = 20;
    ItemMinPriceDelta = 10;
    EnchantmentMinusChanceBase = 0;
    EnchantmentMinusChanceDelta = 0;
    EnchantmentPlusChanceBase = 5;
    EnchantmentPlusChanceDelta = 5;
    BackGroundType = GRAY_FRACTAL;
    IsCatacomb = false;
    EarthquakesAffectTunnels = true;

    Square, Random NOT_WALKABLE|NOT_IN_ROOM;
    {
      Items == stone;
      Times = 25:50;
    }

    Square, Random;
    {
      Items == mine { Team = MONSTER_TEAM; IsActive = true; }
      Times = 0:3;
    }

    Square, Random;
    {
      Items == beartrap { Team = MONSTER_TEAM; IsActive = true; }
      Times = 0:3;
    }

    Square, Random NOT_WALKABLE|ATTACHABLE;
    {
      OTerrain = stairs(STAIRS_UP);
      EntryIndex = STAIRS_UP;
      AttachRequired = true;
    }

    Square, Random NOT_WALKABLE|ATTACHABLE;
    {
      OTerrain = stairs(STAIRS_DOWN);
      EntryIndex = STAIRS_DOWN;
      AttachRequired = true;
    }

    RoomDefault
    {
      Pos = 2:XSize-5,2:YSize-5;
      Size = 4:11,4:11;
      AltarPossible = true;
      WallSquare = solidterrain(GROUND), GRANITE wall(BRICK_OLD);
      FloorSquare = solidterrain(PARQUET), 0;
      DoorSquare = solidterrain(PARQUET), GRANITE door;
      GenerateDoor = true;
      DivineMaster = 0;
      GenerateTunnel = true;
      GenerateLanterns = true;
      Type = ROOM_NORMAL;
      GenerateFountains = true;
      AllowLockedDoors = true;
      AllowBoobyTrappedDoors = true;
      Shape = RECTANGLE;
      IsInside = true;
      GenerateWindows = false;
      UseFillSquareWalls = false;
      Flags = 0;
      GenerateWards = false;
    }
  }

  Level 0;
  {
    FillSquare = solidterrain(GROUND), MORAINE earth;

    RoomDefault
    {
      Pos = 2:XSize-5,2:YSize-5;
      WallSquare = solidterrain(GROUND), FIR_WOOD wall(BRICK_OLD);
      FloorSquare = solidterrain(PARQUET), 0;
      DoorSquare = solidterrain(PARQUET), FIR_WOOD door;
    }
  }

  RandomLevel 1:3;
  {
    Size = 80, 60;

    RoomDefault
    {
      Pos = 2:XSize-5,2:YSize-5;
      Size = 10:20,10:20;
    }

    Room
    {
      AltarPossible = false;
      Size = 30,30;
      Flags = NO_MONSTER_GENERATION;

      Square, Random;
      {
        OTerrain = STEEL sign { Text = "Experimental dwarven mine field. Thank you for participating in testing!"; }
      }

      Square, Random;
      {
        Items == Random { MinPrice = 100; Chance = 50; }
        Times = 20;
      }

      Square, Random;
      {
        Items == Random { MinPrice = 500; Chance = 50; }
        Times = 4;
      }

      Square, Random;
      {
        Items == mine { Team = MONSTER_TEAM; IsActive = true; Chance = 25; }
        Times = 40;
      }

      Square, Random;
      {
        Items == mine(BIG_MINE) { Team = MONSTER_TEAM; IsActive = true; Chance = 25; }
        Times = 20;
      }

      Square, Random;
      {
        Items == backpack { Chance = 25; }
        Times = 4;
      }
    }
  }

  RandomLevel 1:2;
  {
    LevelMessage = "You hear many wolves howling. You shiver.";

    Room
    {
      Size = 7,6;
      AltarPossible = false;
      Shape = ROUND_CORNERS;

      CharacterMap
      {
        Pos = 1,1;
        Size = 5,4;

        Types
        {
          w = wolf;
          W = werewolfhuman { Inventory = { 2, scrollofenchantweapon, scrollofenchantarmor; } }
        }
      }
      {
        .www.
        wwWww
        wwwww
        .www.
      }
    }
  }

  RandomLevel 1:3;
  {
    Room
    {
      Size = 10:14,10:14;
      AltarPossible = false;
      Shape = RECTANGLE;
      FloorSquare = solidterrain(DARK_GRASS_TERRAIN), 0;
      GenerateLanterns = false;

      Square, Random;
      {
        Items == Random { MinPrice = 500; MaxPrice = 2000; }
        Times = 1;
      }

      Square, Random;
      {
        OTerrain = decoration(FIR);
      }

      Square, Random;
      {
        OTerrain = decoration(OAK);
      }

      Square, Random;
      {
        OTerrain = decoration(BIRCH);
      }

      Square, Random;
      {
        OTerrain = decoration(TEAK);
      }

      Square, Random;
      {
        OTerrain = decoration(DWARF_BIRCH);
      }

      Square, Random;
      {
        Character = magpie;
        OTerrain = decoration(PINE);
        Items == stone { Times = 0:1; }
        Times = 5:10;
      }
    }
  }

  Level 3;
  {
    Room
    {
      Size = 7,6;
      AltarPossible = false;
      Shape = ROUND_CORNERS;

      CharacterMap
      {
        Pos = 1,1;
        Size = 5,4;

        Types
        {
          g = guard(DWARVEN_GUARD) { Team = GC_SHOPKEEPER_TEAM; }
        }
      }
      {
        .g.g.
        .....
        .....
        .g.g.
      }
      Square, Pos 3,2;
      {
        OTerrain = stairs(STAIRS_DOWN) { AttachedArea = KHARAZ_ARAD; }
        EntryIndex = STAIRS_DOWN + 1; //STAIRS_DOWN; fix from http://www.attnam.com/topics/953/Bugfix_for_LIVAN_GC5_to_GC4_stairs
      }
      Square, Pos 3,0;
      {
        OTerrain = 0;
        AttachRequired = true;
      }
    }
  }


  RandomLevel 1:3;
  {
    CanGenerateBone = false;

    Room
    {
      Size = 5,9;
      AltarPossible = false;
      DivineMaster = MELLIS;
      Type = ROOM_SHOP;
      GenerateFountains = false;
      AllowLockedDoors = false;

      CharacterMap
      {
        Pos = 1, 1;
        Size = 3, 7;

        Types
        {
          g = guard(SHOP) { Team = GC_SHOPKEEPER_TEAM; }
          s = shopkeeper(ELPURI_CAVE) { Team = GC_SHOPKEEPER_TEAM; Flags = IS_MASTER; }
        }
      }
      {
        g.g
        ...
        ...
        .s.
        ...
        ...
        g.g
      }

      ItemMap
      {
        Pos = 1,1;
        Size = 3,7;

        Types
        {
          g == Random { MinPrice = 100; MaxPrice = 10000; Category = GAUNTLET|BOOT; }
          b == Random { MinPrice = 100; MaxPrice = 10000; Category = GAUNTLET|BOOT; }
          a == Random { MinPrice = 500; MaxPrice = 10000; Category = HELMET|CLOAK|BODY_ARMOR|BELT; }
          d == Random { MinPrice = 200; MaxPrice = 10000; Category = RING|AMULET; }
          w == Random { MinPrice = 500; MaxPrice = 10000; Category = WEAPON|SHIELD; }
          e == Random { MinPrice = 50; MaxPrice = 10000; Category = FOOD|POTION; }
          u == Random { MinPrice = 200; MaxPrice = 10000; Category = WAND|TOOL; }
          r == Random { MinPrice = 200; MaxPrice = 10000; Category = SCROLL|BOOK; }
          s == wand(WAND_OF_STRIKING);
        }
      }
      {
        .g.
        ddb
        err
        e.w
        auw
        auw
        .s.
      }
    }
  }

  RandomLevel 0:11;
  {
    /* I'm Evil, Bwahaha */
    Square, Random;
    {
      Items == VALPURIUM VALPURIUM flamingsword { Enchantment = 10; LifeExpectancy = 1000:10000; Chance = 5; }
    }
  }

  RandomLevel 0:11;
  {
    /* I'm Evil, Bwahaha */
    Square, Random;
    {
      Items == itemcontainer(LARGE_CHEST) { LifeExpectancy = 100:10000; Chance = 5; ItemsInside == Random { MinPrice = 1500; Times = 10; Category = HELMET|AMULET|CLOAK|BODY_ARMOR|WEAPON|SHIELD|RING|GAUNTLET|BELT|BOOT|TOOL|VALUABLE; LifeExpectancy = 100:10000; } }
    }
  }

  RandomLevel 1:4;
  {
    CanGenerateBone = false;

    Room
    {
      Size = 9,9;
      AltarPossible = false;
      GenerateFountains = false;

      OTerrainMap
      {
        Size = 3,3;
        Pos = 3,3;
        Types
        {
          # = METEORIC_STEEL wall(BRICK_OLD);
        }
      }
      {
        ###
        #.#
        ###
      }

      Square, Pos 4,4;
      {
        Items = { 2, MITHRIL beartrap { Team = MONSTER_TEAM; IsActive = true; Chance = 25; }, METEORIC_STEEL itemcontainer(CHEST|OCTAGONAL_LOCK) { Parameters = LOCKED; ItemsInside == Random { MinPrice = 1250; Times = 2; } } }
      }
    }
  }

  Level ENNER_BEAST_LEVEL;
  {
    LevelMessage = "You hear a wailing scream in the distance. An enner beast must dwell in the level!";
    IgnoreDefaultSpecialSquares = true;
    Items = 35:70;
    EnterImage = "Enner.pcx";
    EnterTextDisplacement = -150, 0;

    Room
    {
      Pos = 52,1;
      Size = 10,33;
      Type = ROOM_NORMAL;
      WallSquare = liquidterrain(UNDERGROUND_LAKE), 0;
      FloorSquare = liquidterrain(UNDERGROUND_LAKE), 0;
      GenerateDoor = false;
      AllowLockedDoors = false;
      AllowBoobyTrappedDoors = false;
      GenerateLanterns = false;
      GenerateFountains = false;
      GenerateTunnel = true;
      AltarPossible = false;

      Square, Pos 4, 16;
      {
        Character = ennerbeast;
      }

      Square, Pos -1, 22;
      {
        AttachRequired = true;
      }

      Square, Pos 8, 0;
      {
        OTerrain = stairs(STAIRS_DOWN);
        EntryIndex = STAIRS_DOWN;
      }

      Square, Pos 0, -1;
      {
        OTerrain = 0;
      }

      Square, Pos 1, -1;
      {
        OTerrain = 0;
      }

      Square, Pos 2, -1;
      {
        OTerrain = 0;
      }

      Square, Pos 3, -1;
      {
        OTerrain = 0;
      }

      Square, Pos 4, -1;
      {
        OTerrain = 0;
      }

      Square, Pos 5, -1;
      {
        OTerrain = 0;
      }

      Square, Pos 6, -1;
      {
        OTerrain = 0;
      }

      Square, Pos 2, 34;
      {
        OTerrain = 0;
      }

      Square, Pos 3, 34;
      {
        OTerrain = 0;
      }

      Square, Pos 4, 34;
      {
        OTerrain = 0;
      }

      Square, Pos 5, 34;
      {
        OTerrain = 0;
      }

      Square, Pos 6, 34;
      {
        OTerrain = 0;
      }

      Square, Pos 2, 33;
      {
        GTerrain = liquidterrain(UNDERGROUND_LAKE);
        OTerrain = 0;
      }

      Square, Pos 3, 33;
      {
        GTerrain = liquidterrain(UNDERGROUND_LAKE);
        OTerrain = 0;
      }

      Square, Pos 4, 33;
      {
        GTerrain = liquidterrain(UNDERGROUND_LAKE);
        OTerrain = 0;
      }

      Square, Pos 5, 33;
      {
        GTerrain = liquidterrain(UNDERGROUND_LAKE);
        OTerrain = 0;
      }

      Square, Pos 6, 33;
      {
        GTerrain = liquidterrain(UNDERGROUND_LAKE);
        OTerrain = 0;
      }

      Square, Pos 7, 33;
      {
        GTerrain = liquidterrain(UNDERGROUND_LAKE);
        OTerrain = 0;
      }

      GTerrainMap
      {
        Pos = 0,-1;
        Size = 10,36;
        Types
        {
          # = WATER liquidterrain(UNDERGROUND_LAKE);
          _ = GRAVEL solidterrain(GROUND);
          ~ = SAND solidterrain(SAND_TERRAIN);
          x = FIR_WOOD solidterrain(PARQUET);
        }
      }
      {
        #####~~~~_
        ~#####~~__
        ~~#####~__
        __######~_
        __~#####~_
        __~#####~_
        __~####___
        _~~#####~~
        __#######~
        _~######~~
        _######~~~
        _#######~_
        ~~######~_
        _#####~___
        _#####~~__
        __#####~~_
        _~######__
        __xxxxxxx~
        __~#####~~
        ___######~
        __######~~
        _#######~~
        __#######~
        __######~~
        _~######~~
        ~~~######~
        __#######~
        __######~~
        _~~######~
        _~~#####~~
        __#######~
        _~######~~
        _######~~~
        _#######~_
        ~~######~_
        __#####~~_
      }
    }

    Square, Random;
    {
      Items == mine(BIG_MINE) { Team = MONSTER_TEAM; IsActive = true; }
    }

    Square, Random;
    {
      Items == METEORIC_STEEL beartrap { Team = MONSTER_TEAM; IsActive = true; }
      Times = 2:6;
    }

    Square, Random NOT_WALKABLE|NOT_IN_ROOM;
    {
      Items == stone;
      Times = 25:50;
    }

    Square, BoundedRandom 1, 1, 14, 34, NOT_WALKABLE|ATTACHABLE;
    {
      OTerrain = stairs(STAIRS_UP);
      EntryIndex = STAIRS_UP;
      AttachRequired = true;
    }

    /*k8: not in comm. fork
    Square, Random NOT_WALKABLE|ATTACHABLE;
    {
      OTerrain = stairs(STAIRS_DOWN);
      EntryIndex = STAIRS_DOWN;
      AttachRequired = true;
    }
    */

    Square, Random;
    {
      Items == bone;
      Times = 20;
    }

    Square, Random;
    {
      Items == skull;
      Times = 5;
    }
  }

  Level ZOMBIE_LEVEL;
  {
    Rooms = 1;
    IgnoreDefaultSpecialSquares = true;
    MonsterAmountBase = 20;
    LOSModifier = 24;
    FillSquare = FLINT solidterrain(GROUND), GNEISS earth;
    EarthquakesAffectTunnels = false;

    Room
    {
      Pos = 2,2;
      Size = 60,32;
      AltarPossible = false;
      WallSquare = FLINT solidterrain(GROUND), 0;
      FloorSquare = FLINT solidterrain(GROUND), 0;
      GenerateDoor = false;
      GenerateTunnel = false;
      GenerateLanterns = false;
      GenerateFountains = false;

      Square, BoundedRandom 1, 1, 25, 58, HAS_NO_OTERRAIN;
      {
        OTerrain = stairs(STAIRS_UP);
        EntryIndex = STAIRS_UP;
      }

      Square, BoundedRandom 35, 1, 58, 58, HAS_NO_OTERRAIN;
      {
        OTerrain = stairs(STAIRS_DOWN);
        EntryIndex = STAIRS_DOWN;
      }

      Square, BoundedRandom 35, 1, 58, 58, 0;
      {
        Character = veterankamikazedwarf;
      }
    }

    Square, Random;
    {
      Character = zombie;
      Times = 30;
    }
  }

  Level CITY_LEVEL;
  {
    Size = 45, 55;
    GenerateMonsters = true;
    Rooms = 30;
    Items = 20:30;
    IsOnGround = false;
    TeamDefault = MONSTER_TEAM;
    LOSModifier = 16;
    IgnoreDefaultSpecialSquares = true;
    CanGenerateBone = false;
    EnchantmentMinusChanceBase = 0;
    EnchantmentMinusChanceDelta = 0;
    EnchantmentPlusChanceBase = 0;
    EnchantmentPlusChanceDelta = 0;
    BackGroundType = GRAY_FRACTAL;
    FillSquare = GRANITE solidterrain(GROUND), 0;
    TunnelSquare = GRANITE solidterrain(DARK_GRASS_TERRAIN), 0;
    IsCatacomb = false;
    DifficultyBase = 0;
    DifficultyDelta = 10;
    MonsterAmountBase = 0;
    MonsterAmountDelta = 5;
    MonsterGenerationIntervalBase = 150;
    MonsterGenerationIntervalDelta = -25;

    RoomDefault
    {
      Pos = 2:XSize-5,2:YSize-5;
      Size = 5:9,5:9;
      WallSquare = solidterrain(GROUND), BLACK_GRANITE wall(BRICK_OLD);
      FloorSquare = solidterrain(PARQUET), 0;
      DoorSquare = solidterrain(PARQUET), BLACK_GRANITE door;
      AltarPossible = true;
      GenerateDoor = true;
      DivineMaster = 0;
      GenerateTunnel = true;
      GenerateLanterns = false;
      Type = ROOM_NORMAL;
      GenerateFountains = false;
      AllowLockedDoors = false;
      AllowBoobyTrappedDoors = false;
      Shape = RECTANGLE;
      IsInside = true;
      GenerateWindows = false;
      UseFillSquareWalls = false;
      Flags = 0;
    }

    Room
    {
      Pos = 2:XSize-5,2:YSize-5;
      Size = 5,5;
      AllowLockedDoors = false;
      AllowBoobyTrappedDoors = false;
      Shape = ROUND_CORNERS;
      AltarPossible = false;

      Square, Pos 2,2;
      {
        OTerrain = stairs(STAIRS_UP);
        EntryIndex = STAIRS_UP;
      }

      Square, Pos 2,1;
      {
        Items == lantern;
      }
    }

    Room
    {
      Pos = 2:XSize-5,2:YSize-5;
      Size = 31,23;
      WallSquare = GRANITE solidterrain(GROUND), 0;
      FloorSquare = GRANITE solidterrain(GROUND), 0;
      DoorSquare = GRANITE solidterrain(GROUND), 0;
      AltarPossible = false;
      GenerateFountains = false;
      Shape = RECTANGLE;

      GTerrainMap
      {
        Pos = 0,0;
        Size = 31,23;
        Types
        {
          # = TEAK_WOOD solidterrain(PARQUET) { IsInside = true; }
          - = TEAK_WOOD solidterrain(PARQUET) { IsInside = true; }
          ~ = FIR_WOOD solidterrain(PARQUET) { IsInside = true; }
          @ = FIR_WOOD solidterrain(PARQUET) { IsInside = true; }
        }
      }
      {
        ###################....@@@@@@@@
        #-----------------#....@~~~~~~@
        #------#####------#....@~~~~~~@
        #-----##---##-----#....@~~~~~~@
        #-----#-----#-----#....@~~~~~~@
        #-----#-----#-----#....@~~~~~~@
        #-----#-----#-----#....@~~~~~~@
        #-----##---##-----#....@~~~~~~@
        #------#####------#....@~~~~~~@
        #-----------------#....@~~~~~~@
        ###################....@@@@@@@@
        #------#.......................
        #------#.......................
        #------#.......................
        #------#.......................
        #------#.......................
        ########..............@@@@@@@..
        ......................@~~~~~@..
        ......................@~~~~~@..
        ......................@~~~~~@..
        ......................@~~~~~@..
        ......................@~~~~~@..
        ......................@@@@@@@..
      }

      OTerrainMap
      {
        Pos = 0,0;
        Size = 31,23;

        Types
        {
          # = EBONY_WOOD wall(BRICK_FINE);
          - = 0;
          | = decoration(CARPET);
          D = TEAK_WOOD door(HEXAGONAL_LOCK);
          d = FIR_WOOD door(HEXAGONAL_LOCK);
        }
      }
      {
        ###################....########
        #-----------------#....#------#
        #------##D##------#....#------#
        #-----##---##-----#....#------#
        #-----#-----#-----#....#------#
        #-----D-----D-----D....d------#
        #-----#-----#-----#....#------#
        #-----##---##-----#....#------#
        #------##D##------#....#------#
        #-----------------#....#------#
        ###DD##############....########
        #------#.......................
        #------#.......................
        #------#.......................
        #------#.......................
        #------#.......................
        ########..............###dd##..
        ......................#-----#..
        ......................#-----#..
        ......................#-----#..
        ......................#-----#..
        ......................#-----#..
        ......................#######..
      }

      CharacterMap
      {
        Pos = 0,0;
        Size = 31,23;

        Types
        {
          # = 0;
          - = 0;
          w = wisefarmer;
        }
      }
      {
        ###################....########
        #-----------------#....#------#
        #------#####------#....#------#
        #-----##---##-----#....#------#
        #-----#-----#-----#....#------#
        #-----#--w--#-----#....#------#
        #-----#-----#-----#....#------#
        #-----##---##-----#....#------#
        #------#####------#....#------#
        #-----------------#....#------#
        ###################....########
        #------#.......................
        #------#.......................
        #------#.......................
        #------#.......................
        #------#.......................
        ########..............#######..
        ......................#-----#..
        ......................#-----#..
        ......................#-----#..
        ......................#-----#..
        ......................#-----#..
        ......................#######..
      }

      ItemMap
      {
        Pos = 0,0;
        Size = 31, 23;

        Types
        {
          * == 0;
          # == 0;
          - == 0;
          1 == lantern { SquarePosition = UP; }
          2 == lantern { SquarePosition = DOWN; }
          3 == lantern { SquarePosition = RIGHT; }
          4 == lantern { SquarePosition = LEFT; }
          $ == Random { MinPrice = 1000; MaxPrice = 5000; }
        }
      }
      {
        ###################....########
        #-----------------#....#------#
        #------#2#2#------#....#------#
        #-----##---##-----#....#------#
        #-----3-----4-----#....#------#
        #-----#--$--#-----#....#------#
        #-----3-----4-----#....#------#
        #-----##---##-----#....#------#
        #------#1#1#------#....#------#
        #-----------------#....#------#
        ###################....########
        #------#.......................
        #------#.......................
        #------#.......................
        #------#.......................
        #------#.......................
        ########..............#######..
        ......................#-----#..
        ......................#-----#..
        ......................#-----#..
        ......................#-----#..
        ......................#-----#..
        ......................#######..
      }

      Square, Pos 3,13;
      {
        OTerrain = stairs(STAIRS_DOWN);
        EntryIndex = STAIRS_DOWN;
      }
    }

    Square, Random;
    {
      Items == GRANITE stone;
      Times = 50:100;
    }

    Square, Random NOT_IN_ROOM|HAS_NO_OTERRAIN;
    {
      OTerrain = boulder(1);
      Times = 50:100;
    }

    Square, Random NOT_IN_ROOM|HAS_NO_OTERRAIN;
    {
      OTerrain = boulder(2);
      Times = 50:100;
    }

    Square, Random IN_ROOM|HAS_NO_OTERRAIN;
    {
      GTerrain = GRANITE solidterrain(GROUND);
      Times = 100;
    }

    Room
    {
      Pos = 2:XSize-5,2:YSize-5;
      Size = 8,8;
      WallSquare = GRANITE solidterrain(GROUND), 0;
      FloorSquare = GRANITE solidterrain(GROUND), 0;
      DoorSquare = GRANITE solidterrain(GROUND), 0;
      AltarPossible = false;
      GenerateFountains = false;
      Shape = RECTANGLE;

      GTerrainMap
      {
        Pos = 0,0;
        Size = 8,8;
        Types
        {
          # = GRANITE solidterrain(GROUND) { IsInside = true; }
          - = FIR_WOOD solidterrain(PARQUET) { IsInside = true; }
          ~ = FIR_WOOD solidterrain(PARQUET) { IsInside = true; }
          @ = FIR_WOOD solidterrain(PARQUET) { IsInside = true; }
        }
      }
      {
        ########
        #------.
        #------.
        #-----..
        #----...
        #----...
        #--.....
        #-......
      }

      OTerrainMap
      {
        Pos = 0,0;
        Size = 8,8;

        Types
        {
          # = EBONY_WOOD wall(BRICK_FINE);
          - = 0;
          | = decoration(CARPET);
          D = TEAK_WOOD door(HEXAGONAL_LOCK);
          d = FIR_WOOD door(HEXAGONAL_LOCK);
        }
      }
      {
        #####---
        #------.
        #------.
        #-----..
        #----...
        -----...
        ---.....
        --......
      }

      CharacterMap
      {
        Pos = 0,0;
        Size = 8,8;

        Types
        {
          # = 0;
          - = 0;
        }
      }
      {
        ########
        #------.
        #------.
        #-----..
        #----...
        #----...
        #--.....
        #-......
      }

      ItemMap
      {
        Pos = 0,0;
        Size = 8, 8;

        Types
        {
          * == 0;
          # == 0;
          - == 0;
          1 == lantern { SquarePosition = UP; }
          2 == lantern { SquarePosition = DOWN; }
          3 == lantern { SquarePosition = RIGHT; }
          4 == lantern { SquarePosition = LEFT; }
          5 == lantern;
          / == EBONY_WOOD stick;
        }
      }
      {
        #####///
        #//----.
        #/-----.
        #-----..
        #----...
        /----...
        /--.....
        /-......
      }
    }

    Room
    {
      Pos = 2:XSize-5,2:YSize-5;
      Size = 7,6;
      WallSquare = solidterrain(GROUND),wall(BRICK_OLD);
      FloorSquare = solidterrain(PARQUET), 0;
      GenerateDoor = false;
      Type = ROOM_NORMAL;
      GenerateLanterns = false;
      GenerateWindows = false;
      AltarPossible = false;

      Square, Pos 3, 5;
      {
        GTerrain = solidterrain(PARQUET);
        OTerrain = door;
      }

      Square, Pos 3, 0;
      {
        Items == lantern { SquarePosition = DOWN; }
      }

      Square, Pos 0, 5;
      {
        Items == lantern { SquarePosition = DOWN; }
      }

      Square, Pos 6, 5;
      {
        Items == lantern { SquarePosition = DOWN; }
      }

      OTerrainMap
      {
        Pos = 1,1;
        Size = 5,4;
        Types
        {
          = = olterraincontainer(BOOK_CASE) { ItemsInside == Random { MaxPrice = 500; Category = SCROLL|BOOK; } }
        }
      }
      {
        =====
        =...=
        ==.==
        =...=
      }
    }
  }

  RandomLevel 1:4;
  {
    Room /* vault */
    {
      GenerateLanterns = false;
      GenerateFountains = false;
      GenerateDoor = false;
      GenerateTunnel = false;
      AltarPossible = false;
      Size = 7,7;
      UseFillSquareWalls = true;
      Flags = NO_MONSTER_GENERATION;

      OTerrainMap
      {
        Pos = 1,1;
        Size = 5,5;
        Types
        {
          x = IRON wall(BRICK_OLD);
        }
      }
      {
        xxxxx
        x...x
        x...x
        x...x
        xxxxx
      }

      Square, Random;
      {
        Items == mine { Team = MONSTER_TEAM; IsActive = true; Chance = 50; }
      }

      Square, Random;
      {
        Items == mine(BIG_MINE) { Team = MONSTER_TEAM; IsActive = true; Chance = 50; }
      }

      Square, Random;
      {
        Items == MITHRIL beartrap { Team = MONSTER_TEAM; IsActive = true; Chance = 50; }
        Times = 2;
      }

      Square, Pos 3,3;
      {
        Items == METEORIC_STEEL itemcontainer(CHEST|OCTAGONAL_LOCK)
        {
          Parameters = LOCKED;
          ItemsInside = { 2,  Random { MinPrice = 1250; Times = 2; },
                              stone { Chance = 75; Times = 3; } }
        }
      }
    }
  }

  Level FUSANGA_LEVEL;
  {
    Size = 60, 60;
    Rooms = 100;
    IgnoreDefaultSpecialSquares = true;

    Square, Pos 1, 1;
    {
      OTerrain = stairs(STAIRS_UP);
      EntryIndex = STAIRS_UP;
      AttachRequired = true;
    }

    Square, Pos 58, 58;
    {
      OTerrain = stairs(STAIRS_DOWN);
      EntryIndex = STAIRS_DOWN;
      AttachRequired = true;
    }

    Square, Random;
    {
      Character = magicmushroom { Team = MONSTER_TEAM; }
      Times = 10;
    }

    RoomDefault
    {
      AltarPossible = false;
      Pos = 2:XSize-5,2:YSize-5;
      Size = 3:3,3:3;
      AltarPossible = false;
      WallSquare = solidterrain(GROUND), 0;
      FloorSquare = solidterrain(GROUND), 0;
      DoorSquare = solidterrain(GROUND), 0;
      GenerateDoor = true;
      DivineMaster = 0;
      GenerateTunnel = true;
      GenerateLanterns = false;
      Type = ROOM_NORMAL;
      GenerateFountains = true;
      AllowLockedDoors = true;
      AllowBoobyTrappedDoors = true;
      Shape = ROUND_CORNERS;
      IsInside = true;
      GenerateWindows = false;
      UseFillSquareWalls = false;
      Flags = 0;
    }

    Room
    {
      Size = 4,4;
      Pos = 30,30;
      GenerateFountains = false;
      AltarPossible = false;
      GenerateLanterns = false;
      Shape = ROUND_CORNERS;

      CharacterMap
      {
        Size = 4,4;
        Pos = 0,0;
        Types
        {
          M = magicmushroom;
          m = menatrixfusanga;
        }
      }
      {
        .MM.
        Mm.M
        M..M
        .MM.
      }
    }
  }

  Level 8;
  {
    IgnoreDefaultSpecialSquares = true;
    FillSquare = solidterrain(GROUND), QUARTZITE earth;

    RoomDefault
    {
      WallSquare = solidterrain(GROUND), COPPER wall(BRICK_OLD);
      FloorSquare = solidterrain(PARQUET), 0;
      DoorSquare = solidterrain(PARQUET), COPPER door;
    }

    Square, Random NOT_WALKABLE|NOT_IN_ROOM;
    {
      Items == stone;
      Times = 25:50;
    }

    Square, Random;
    {
      Items == mine { Team = MONSTER_TEAM; IsActive = true; }
      Times = 0:3;
    }

    Square, Random;
    {
      Items == mine(BIG_MINE) { Team = MONSTER_TEAM; IsActive = true; Chance = 50; }
    }

    Square, Random;
    {
      Items == METEORIC_STEEL beartrap { Team = MONSTER_TEAM; IsActive = true; }
      Times = 2:6;
    }

    Square, Random NOT_WALKABLE|ATTACHABLE;
    {
      OTerrain = stairs(STAIRS_UP);
      EntryIndex = STAIRS_UP;
      AttachRequired = true;
    }

    Room
    {
      Size = 7,7;
      AltarPossible = false;
      GenerateFountains = false;
      GenerateDoor = false;
      GenerateLanterns = false;
      WallSquare = solidterrain(GROUND),IRON wall(BRICK_OLD);
      FloorSquare = IRON solidterrain(PARQUET), 0;
      DoorSquare = IRON solidterrain(PARQUET),IRON door { Parameters = LOCKED; }

      Square, Pos 3,6;
      {
        GTerrain = solidterrain(PARQUET);
        OTerrain = IRON door { Parameters = LOCKED; }
        AttachRequired = true;
      }

      Square, Pos 3,3;
      {
        Character = mysticfrog(DARK);
        OTerrain = stairs(STAIRS_DOWN);
        EntryIndex = STAIRS_DOWN;
      }

      Square, Random;
      {
        Character = frog(GREATER_DARK);
        Times = 2;
      }

      Square, Random;
      {
        Character = frog(DARK);
        Times = 4;
      }
    }
  }

  Level IVAN_LEVEL;
  {
    LevelMessage = "You hear someone singing loudly: \"Uncle Lenin lives in Russia...\"";
    FillSquare = solidterrain(GROUND), QUARTZITE earth;
    EnterImage = "IVlad.pcx";
    EnterTextDisplacement = 260, 0;

    RoomDefault
    {
      WallSquare = solidterrain(GROUND), BRONZE wall(BRICK_OLD);
      FloorSquare = solidterrain(PARQUET), 0;
      DoorSquare = solidterrain(PARQUET), BRONZE door;
    }

    Square, Random;
    {
      Items == mine(BIG_MINE) { Team = MONSTER_TEAM; IsActive = true; }
      Times = 0:2;
    }

    Square, Random NOT_IN_ROOM;
    {
      Character = communist { Team = IVAN_TEAM; Flags = IS_LEADER; }
    }

    Square, Random;
    {
      Character = vladimir { Team = IVAN_TEAM; }
    }
  }

  RandomLevel 6:8;
  {
    Room /* vault */
    {
      GenerateLanterns = false;
      GenerateFountains = false;
      GenerateDoor = false;
      GenerateTunnel = false;
      AltarPossible = false;
      Size = 7,7;
      UseFillSquareWalls = true;
      Flags = NO_MONSTER_GENERATION;

      OTerrainMap
      {
        Pos = 1,1;
        Size = 5,5;
        Types
        {
          x = STEEL wall(BRICK_OLD);
        }
      }
      {
        xxxxx
        x...x
        x...x
        x...x
        xxxxx
      }

      Square, Random;
      {
        Items == mine { Team = MONSTER_TEAM; IsActive = true; }
      }

      Square, Random;
      {
        Items == mine(BIG_MINE) { Team = MONSTER_TEAM; IsActive = true; Chance = 75; }
      }

      Square, Random;
      {
        Items == OCTIRON beartrap { Team = MONSTER_TEAM; IsActive = true; Chance = 50; }
        Times = 4;
      }

      Square, Pos 3,3;
      {
        Items == ADAMANT itemcontainer(CHEST|OCTAGONAL_LOCK)
        {
          Parameters = LOCKED;
          ItemsInside == Random { MinPrice = 2000; Times = 2; }
        }
      }
    }
  }

  Level DARK_LEVEL;
  {
    Description = "dark level";
    ShortDescription = "DarkLevel";
    LevelMessage = "You shudder as you sense a being of pure darkness nearby. Your goal is near.";
    FillSquare = STEEL solidterrain(FLOOR), STEEL wall(BRICK_OLD);
    TunnelSquare = STEEL solidterrain(FLOOR), 0;
    Items = 0;
    IgnoreDefaultSpecialSquares = true;

    Square, Random;
    {
      Items == mine(BIG_MINE) { Team = MONSTER_TEAM; IsActive = true; }
      Times = 1:3;
    }

    RoomDefault
    {
      AltarPossible = false;
      FloorSquare = STEEL solidterrain(PARQUET), 0;
      WallSquare = STEEL solidterrain(FLOOR), STEEL wall(BRICK_OLD);
      DoorSquare = STEEL solidterrain(PARQUET), STEEL door;
      GenerateLanterns = false;
      GenerateFountains = false;
    }

    Room
    {
      Size = 11, 11;
      DivineMaster = SCABIES;

      Square, Pos 5, 5;
      {
        OTerrain = portal(DARK_LEVEL) { AttachedArea = DARK_LEVEL + 1; AttachedEntry = STAIRS_UP; }
        Character = elpuri;
      }

      Square, Random;
      {
        Character = frog(DARK);
        Times = 8;
      }

      Square, Random;
      {
        Character = frog(GREATER_DARK);
        Times = 4;
      }

      Square, Random;
      {
        Character = frog(GIANT_DARK);
        Times = 2;
      }

      Square, Random;
      {
        Character = mysticfrog(DARK);
      }

      Square, Random;
      {
        Items == HUMAN_FLESH lump;
        Times = 5;
      }

      Square, Random;
      {
        Items == bone;
        Times = 10;
      }

      Square, Random;
      {
        Items == skull;
        Times = 5;
      }
    }

    Square, Random NOT_WALKABLE|ATTACHABLE;
    {
      OTerrain = stairs(STAIRS_UP);
      EntryIndex = STAIRS_UP;
      AttachRequired = true;
    }
  }

  RandomLevel 9:11;
  {
    Room
    {
      Size = 7,7;
      AltarPossible = false;
      Shape = ROUND_CORNERS;

      CharacterMap
      {
        Pos = 1,1;
        Size = 5,5;

        Types
        {
          G = golem;
          V = golem(VALPURIUM) { Inventory = { 2, scrollofgolemcreation, scrollofgolemcreation { Chance = 10; Times = 4; } } }
        }
      }
      {
        .GGG.
        GGGGG
        GGVGG
        GGGGG
        .GGG.
      }
    }
  }

  RandomLevel 9:12;
  {
    Room
    {
      Size = 9,7;
      AltarPossible = false;
      GenerateFountains = false;
      Shape = ROUND_CORNERS;

      CharacterMap
      {
        Pos = 1,1;
        Size = 7,5;

        Types
        {
          G = orc(GENERAL) { Inventory = { 2, Random { MinPrice = 100; Category = POTION; Times = 4; }, Random { MinPrice = 200; Category = POTION; Times = 2; } } }
          O = orc(OFFICER) { Inventory == Random { MinPrice = 100; Category = POTION; Times = 2; } }
          S = orc(SQUAD_LEADER);
          s = orc(SLAUGHTERER);
          o = orc;
        }
      }
      {
        .ooooo.
        osSOSso
        ossGsso
        osSOSso
        .ooooo.
      }
    }
  }

  RandomLevel 12:13;
  {
    Room
    {
      Size = 5,12;
      AltarPossible = false;
      GenerateFountains = false;
      GenerateDoor = false;
      GenerateTunnel = false;
      FloorSquare = ARCANITE solidterrain(PARQUET), 0;
      WallSquare = ARCANITE solidterrain(FLOOR), OCTIRON wall(BRICK_OLD);

      CharacterMap
      {
        Pos = 1,1;
        Size = 3,10;

        Types
        {
          E = darkmage(ELDER) { Inventory == Random { MinPrice = 750; Category = WAND|SCROLL; } }
          B = darkmage(BATTLE_MAGE);
          A = darkmage(APPRENTICE);
          M = mysticfrog(DARK);
          N = necromancer(MASTER_NECROMANCER);
          n = necromancer(APPRENTICE_NECROMANCER);
          a = golem(ARCANITE);
          O = golem(OCTIRON);
        }
      }
      {
        aOa
        nnn
        AAA
        BMB
        NEN
        NEN
        BMB
        AAA
        nnn
        aOa
      }

      Square, Pos 2, 0;
      {
        GTerrain = ARCANITE solidterrain(PARQUET);
        OTerrain = OCTIRON door(OCTAGONAL_LOCK) { Parameters = LOCKED; }
        AttachRequired = true;
      }

      Square, Pos 2, 11;
      {
        GTerrain = ARCANITE solidterrain(PARQUET);
        OTerrain = OCTIRON door(OCTAGONAL_LOCK) { Parameters = LOCKED; }
        AttachRequired = true;
      }
    }
  }

  Level 11;
  {
    Size = 20, 100;
    IgnoreDefaultSpecialSquares = true;
    DifficultyBase = 60;
    MonsterAmountBase = 12;
    ItemMinPriceBase = 30;
    Rooms = 20:40;
    FillSquare = MILKY_QUARTZ solidterrain(GROUND), ROCK_CRYSTAL earth;
    TunnelSquare = MILKY_QUARTZ solidterrain(GROUND), 0;
    BackGroundType = RED_FRACTAL;

    RoomDefault
    {
      Pos = 2:XSize-5,2:YSize-5;
      Size = 3:5,3:5;
      WallSquare = ROSE_QUARTZ solidterrain(GROUND), ROSE_QUARTZ wall(BRICK_OLD);
      FloorSquare = ROSE_QUARTZ solidterrain(GROUND), 0;
      DoorSquare = ROSE_QUARTZ solidterrain(GROUND), ROSE_QUARTZ door;
    }

    Room
    {
      Pos = 2:XSize-5, 2:YSize/4-5;

      Square, Random;
      {
        EntryIndex = STAIRS_UP;
      }
    }

    Square, Random;
    {
      Items == mine(BIG_MINE) { Team = MONSTER_TEAM; IsActive = true; }
      Times = 2:6;
    }

    Square, Random;
    {
      Items == MITHRIL beartrap { Team = MONSTER_TEAM; IsActive = true; }
      Times = 2:6;
    }

    Square, BoundedRandom 1, YSize * 3 / 4, XSize - 2, YSize - 2, NOT_WALKABLE|ATTACHABLE;
    {
      OTerrain = stairs(STAIRS_DOWN);
      EntryIndex = STAIRS_DOWN;
      AttachRequired = true;
    }
  }

  Level 12;
  {
    Size = 20, 100;
    IgnoreDefaultSpecialSquares = true;
    DifficultyBase = 70;
    MonsterAmountBase = 14;
    ItemMinPriceBase = 40;
    Rooms = 20:40;
    Items = 35:70;
    FillSquare = MILKY_QUARTZ solidterrain(GROUND), ROCK_CRYSTAL earth;
    TunnelSquare = MILKY_QUARTZ solidterrain(GROUND), 0;
    BackGroundType = BLUE_FRACTAL;

    RoomDefault
    {
      Pos = 2:XSize-5,2:YSize-5;
      Size = 3:5,3:5;
      WallSquare = AMETHYST solidterrain(GROUND), AMETHYST wall(BRICK_OLD);
      FloorSquare = AMETHYST solidterrain(GROUND), 0;
      DoorSquare = AMETHYST solidterrain(GROUND), AMETHYST door;
    }

    Square, Random;
    {
      Items == mine(BIG_MINE) { Team = MONSTER_TEAM; IsActive = true; }
      Times = 2:6;
    }

    Square, Random;
    {
      Items == MITHRIL beartrap { Team = MONSTER_TEAM; IsActive = true; }
      Times = 2:6;
    }

    Square, BoundedRandom 1, YSize * 3 / 4, XSize - 2, YSize - 2, NOT_WALKABLE|ATTACHABLE;
    {
      OTerrain = stairs(STAIRS_UP);
      EntryIndex = STAIRS_UP;
      AttachRequired = true;
    }

    Square, BoundedRandom 1, 1, XSize - 2, YSize/4 - 2, NOT_WALKABLE|ATTACHABLE;
    {
      OTerrain = stairs(STAIRS_DOWN);
      EntryIndex = STAIRS_DOWN;
      AttachRequired = true;
    }
  }

  Level 13;
  {
    Size = 64,36;
    IgnoreDefaultSpecialSquares = true;
    DifficultyBase = 80;
    MonsterAmountBase = 50;
    MonsterAmountDelta = 0;
    ItemMinPriceBase = 50;
    Items = 45:90;
    FillSquare = ARCANITE solidterrain(GROUND), ARCANITE earth;
    TunnelSquare = ARCANITE solidterrain(GROUND), 0;
    BackGroundType = YELLOW_FRACTAL;

    RoomDefault
    {
      Pos = 2:XSize-5,2:YSize-5;
      Size = 6:20,6:20;
      WallSquare = ARCANITE solidterrain(GROUND), OCTIRON wall(BRICK_OLD);
      FloorSquare = ARCANITE solidterrain(PARQUET), 0;
      DoorSquare = ARCANITE solidterrain(PARQUET), OCTIRON door;
    }

    Square, Random;
    {
      Items == mine(BIG_MINE) { Team = MONSTER_TEAM; IsActive = true; }
      Times = 2:6;
    }

    Square, Random;
    {
      Items == MITHRIL beartrap { Team = MONSTER_TEAM; IsActive = true; }
      Times = 2:6;
    }

    Square, Random NOT_WALKABLE|ATTACHABLE;
    {
      OTerrain = stairs(STAIRS_UP);
      EntryIndex = STAIRS_UP;
      AttachRequired = true;
    }

    Room
    {
      Size = 21,21;
      GenerateFountains = false;
      AltarPossible = false;

      Square, Pos 10,10;
      {
        OTerrain = portal(OREE_LAIR_ENTRY) { AttachedArea = OREE_LAIR; AttachedEntry = STAIRS_UP; }
      }

      Square, Pos 10,10;
      {
        EntryIndex = STAIRS_DOWN;
      }
    }

    Square, Random;
    {
      Items == pickaxe;
    }

    Room /* vault */
    {
      GenerateLanterns = false;
      GenerateFountains = false;
      GenerateDoor = false;
      GenerateTunnel = false;
      AltarPossible = false;
      Size = 7,7;
      UseFillSquareWalls = true;
      Flags = NO_MONSTER_GENERATION;

      OTerrainMap
      {
        Pos = 1,1;
        Size = 5,5;
        Types
        {
          x = ADAMANT wall(BRICK_OLD);
        }
      }
      {
        xxxxx
        x...x
        x...x
        x...x
        xxxxx
      }

      Square, Random;
      {
        Items == mine(BIG_MINE) { Team = MONSTER_TEAM; IsActive = true; Chance = 75; }
        Times = 3;
      }

      Square, Random;
      {
        Items == ADAMANT beartrap { Team = MONSTER_TEAM; IsActive = true; Chance = 75; }
        Times = 4;
      }

      Square, Pos 3,3;
      {
        Items == ADAMANT itemcontainer(CHEST|OCTAGONAL_LOCK)
        {
          Parameters = LOCKED;
          ItemsInside == Random { MinPrice = 3000; Times = 2; }
        }
      }
    }
  }

  Level OREE_LAIR;
  {
    Description = "Oree's lair";
    ShortDescription = "OreeLair";
    LevelMessage = "\"Welcome to my lair, mortal! There's no escape now!\"";
    FillSquare = BLOOD liquidterrain(UNDERGROUND_LAKE), 0;
    TunnelSquare = solidterrain(GROUND), 0;
    Rooms = 5;
    GenerateMonsters = false;
    Items = 0;
    IgnoreDefaultSpecialSquares = true;
    CanGenerateBone = false;
    DifficultyBase = 90;
    BackGroundType = RED_FRACTAL;

    RoomDefault
    {
      Pos = 2:XSize-5,2:YSize-5;
      Size = 5:7,5:7;
      WallSquare = RUBY solidterrain(PARQUET), RUBY wall(BRICK_FINE);
      FloorSquare = RUBY solidterrain(PARQUET), 0;
      DoorSquare = RUBY solidterrain(PARQUET), RUBY door(OCTAGONAL_LOCK);
      Shape = ROUND_CORNERS;
      AltarPossible = false;
      DivineMaster = CRUENTUS;
      GenerateFountains = false;
      GenerateLanterns = false;
      AllowLockedDoors = false;
      IsInside = false;
    }

    Room
    {
      Size = 9,9;
      GenerateDoor = false;

      Square, Pos 4,0;
      {
        OTerrain = RUBY door(OCTAGONAL_LOCK) { Parameters = LOCKED; }
        AttachRequired = true;
      }

      Square, Pos 4,4;
      {
        EntryIndex = STAIRS_UP;
      }

      CharacterMap
      {
        Pos = 1,1;
        Size = 7,7;

        Types
        {
          B = darkknight(ELITE);
          G = golem(ACIDOUS_BLOOD);
        }
      }
      {
        ..G.G..
        .......
        G..B..G
        ..B.B..
        G..B..G
        .......
        ..G.G..
      }
    }

    Room
    {
      Size = 9,9;
      DivineMaster = CRUENTUS;

      Square, Pos 4,1;
      {
        OTerrain = STEEL altar(CRUENTUS);
      }

      Square, Pos 1,4;
      {
        OTerrain = portal(OREE_LAIR_EXIT) { AttachedArea = 0; AttachedEntry = RANDOM; }
      }

      Square, Pos 7,4;
      {
        OTerrain = monsterportal;
      }

      CharacterMap
      {
        Pos = 1,1;
        Size = 7,7;

        Types
        {
          O = oree;
          A = angel(CRUENTUS);
        }
      }
      {
        ..O.A..
        .......
        .......
        .......
        .......
        .......
        .......
      }
    }

    Square, Random NOT_IN_ROOM;
    {
      Character = darkknight(ELITE);
      Times = 4;
    }

    Square, Random NOT_IN_ROOM;
    {
      Character = frog(GIANT_DARK);
      Times = 2;
    }

    Square, Random NOT_IN_ROOM;
    {
      Character = mysticfrog(DARK);
      Times = 1;
    }

    Square, Random NOT_IN_ROOM;
    {
      Character = darkmage(APPRENTICE);
      Times = 4;
    }

    Square, Random NOT_IN_ROOM;
    {
      Character = darkmage(BATTLE_MAGE);
      Times = 2;
    }

    Square, Random NOT_IN_ROOM;
    {
      Character = darkmage(ELDER);
      Times = 1;
    }
  }

  Level KHARAZ_ARAD;
  {
    Description = "Kharaz-Arad";
    ShortDescription = "KharazArad";
    TeamDefault = KHARAZ_ARAD_TEAM;
    FillSquare = solidterrain(GROUND), MORAINE earth;
    TunnelSquare = GRAVEL solidterrain(GROUND), 0;
    Size = 70, 70;
    Rooms = 25;
    GenerateMonsters = false;
    Items = 0;
    IgnoreDefaultSpecialSquares = true;
    CanGenerateBone = false;
    DifficultyBase = 90;

    RoomDefault
    {
      Pos = 2:XSize-5,2:YSize-5;
      Size = 5:9,5:9;
      AltarPossible = false;
      WallSquare = solidterrain(GROUND), GRANITE wall(BRICK_FINE);
      FloorSquare = solidterrain(PARQUET), 0;
      DoorSquare = solidterrain(PARQUET), GRANITE door;
      GenerateDoor = true;
      DivineMaster = 0;
      GenerateTunnel = true;
      GenerateLanterns = true;
      Type = ROOM_NORMAL;
      GenerateFountains = false;
      AllowLockedDoors = false;
      AllowBoobyTrappedDoors = false;
      Shape = RECTANGLE;
      IsInside = true;
      GenerateWindows = false;
      UseFillSquareWalls = false;
      Flags = 0;

      Square, Random;
      {
        Items == Random { MinPrice = 1; MaxPrice = 2000; }
        Times = 0:1;
      }

      Square, Random;
      {
        Items == Random { MinPrice = 1; MaxPrice = 1000; }
        Times = 0:1;
      }
    }

    Room
    {
      Pos = 2:XSize-5,2:YSize-5;
      Size = 6:10,6:10;
      AltarPossible = false;
      WallSquare = GRAVEL solidterrain(GROUND), 0;
      FloorSquare = GRAVEL solidterrain(GROUND), 0;
      DoorSquare = GRAVEL solidterrain(GROUND), 0;
      GenerateDoor = false;
      DivineMaster = 0;
      GenerateTunnel = true;
      GenerateLanterns = true;
      Type = ROOM_NORMAL;
      GenerateFountains = false;
      AllowLockedDoors = false;
      AllowBoobyTrappedDoors = false;
      Shape = ROUND_CORNERS;
      IsInside = true;
      GenerateWindows = false;
      UseFillSquareWalls = true;
      Flags = 0;

      Square, Random;
      {
        Items == stone;
        Times = 1;
      }

      Square, Random;
      {
        Items == stone;
        Times = 0:1;
      }
    }

    Room
    {
      Size = 7,6;
      GenerateFountains = false;
      AltarPossible = false;
      Shape = ROUND_CORNERS;

      CharacterMap
      {
        Pos = 1,1;
        Size = 5,4;

        Types
        {
          g = guard(ELITE) { Team = KHARAZ_ARAD_TEAM; }
        }
      }
      {
        .....
        .....
        .....
        .....
      }
      Square, Pos 3,2;
      {
        OTerrain = stairs(STAIRS_UP) { AttachedArea = 3; AttachedEntry = STAIRS_DOWN + 1; } // fix from http://www.attnam.com/topics/953/Bugfix_for_LIVAN_GC5_to_GC4_stairs
        EntryIndex = STAIRS_UP;
      }
    }

    Room
    {
      Size = 9,9;
      AltarPossible = false;
      DivineMaster = MELLIS;
      Type = ROOM_SHOP;
      GenerateFountains = false;
      Shape = RECTANGLE;
      GenerateLanterns = false;
      AllowLockedDoors = false;

      CharacterMap
      {
        Pos = 1, 1;
        Size = 7, 7;

        Types
        {
          g = guard(SHOP) { Team = KHARAZ_ARAD_TEAM; }
          s = shopkeeper(KHARAZ_ARAD_SHOP) { Team = KHARAZ_ARAD_TEAM; Flags = IS_MASTER; }
        }
      }
      {
        g.....g
        .......
        .......
        ...s...
        .......
        .......
        g.....g
      }

      ItemMap
      {
        Pos = 1,1;
        Size = 7,7;

        Types
        {
          g == Random { MinPrice = 100; MaxPrice = 10000; Category = GAUNTLET|BOOT; }
          b == Random { MinPrice = 500; MaxPrice = 10000; Category = GAUNTLET|BOOT; }
          a == Random { MinPrice = 200; MaxPrice = 10000; Category = HELMET|CLOAK|BODY_ARMOR|BELT; }
          d == Random { MinPrice = 100; MaxPrice = 10000; Category = RING|AMULET; }
          w == Random { MinPrice = 100; MaxPrice = 10000; Category = WEAPON|SHIELD; }
          e == Random { MinPrice = 100; MaxPrice = 10000; Category = FOOD|POTION; }
          u == Random { MinPrice = 100; MaxPrice = 10000; Category = WAND|TOOL; }
          r == Random { MinPrice = 100; MaxPrice = 10000; Category = SCROLL|BOOK; }
          R == Random { MinPrice = 300; MaxPrice = 10000; Category = WEAPON; }
          W == Random { MinPrice = 750; MaxPrice = 10000; Category = WEAPON; }
          1 == lantern { SquarePosition = UP; }
          2 == lantern { SquarePosition = DOWN; }
          3 == lantern { SquarePosition = RIGHT; }
          4 == lantern { SquarePosition = LEFT; }
        }
      }
      {
        2WRRgg2
        ddddbbb
        errrrrr
        eeeeeww
        aaauuww
        aaauuww
        1aauuu1
      }
    }

    Room
    {
      Type = ROOM_VAULT;
      Size = 37,20;
      AltarPossible = false;
      GenerateFountains = false;
      Shape = RECTANGLE;

      GTerrainMap
      {
        Pos = 2,2;
        Size = 33,16;
        Types
        {
          # = STEEL solidterrain(FLOOR) { IsInside = true; }
          - = STEEL solidterrain(FLOOR) { IsInside = true; }
        }
      }
      {
        #################################
        #-----#--#-------------#--#-----#
        #-----#--#-------------#--#-----#
        #-----#--#-------------#--#-----#
        #-----#--#-------------#--#-----#
        #-----#--#-------------#--#-----#
        #-----#--#-------------#--#-----#
        #######--###############--#######
        #-----#-------------------#-----#
        #-----#-------------------#-----#
        #-----#####################-----#
        #-----#-------------------#-----#
        #-----#-------------------#-----#
        #-----#-------------------#-----#
        #-----#-------------------#-----#
        #################################
      }

      OTerrainMap
      {
        Pos = 2,2;
        Size = 33,16;

        Types
        {
          # = STEEL wall(BRICK_FINE);
          - = 0;
          T = throne;
          | = decoration(CARPET);
          A = ADAMANT altar(LORICATUS);
          D = STEEL door(HEXAGONAL_LOCK);
        }
      }
      {
        #################################
        #-----D--#------T------#--D-----#
        #-----#--#------|------#--#-----#
        #-----#--#------|------#--#-----#
        #-----#--#------|------#--#-----#
        #-----#--#------|------#--#-----#
        #-----#--#------|------#--#-----#
        #######--#######D#######--#######
        #-----D---------|---------D-----#
        #-----#---------|---------#-----#
        #-----##########D##########-----#
        #-----#-------------------#-----#
        #-----#-------------------#-----#
        #-----#-------------------#-----#
        #-----#-------------------#-----#
        ################D################
      }

      ItemMap
      {
        Pos = 2,2;
        Size = 33,16;
        Types
        {
          # == 0;
          - == 0;
          S == goldenjaguarshirt;
          P == phoenixshield;
          1 == lantern { SquarePosition = UP; }
          2 == lantern { SquarePosition = DOWN; }
          3 == lantern { SquarePosition = RIGHT; }
          4 == lantern { SquarePosition = LEFT; }
          b == backpack;
        }
      }
      {
        ########2#####2###2#####2########
        3-----#--#-------------#--#-----4
        #-----4--#-------------#--3-----#
        #-----#--#-------------#--#-----#
        #--S--#--3-------------4--#--P--#
        #-----#--#-------------#--#-----#
        3-----4--#-------------#--3-----4
        #######--######1#1######--#######
        3-----#-------------------#-----4
        #b---b3-------------------4-----#
        #b---b#########1#1#########-----#
        #b---b#-------------------#-----#
        #b---b3-------------------4-----#
        #b---b#-------------------#-----#
        3-----4-------------------3-----4
        ###############1#1###############
      }

      CharacterMap
      {
        Pos = 2,2;
        Size = 33,16;
        Types
        {
          # = 0;
          - = 0;
          g = guard(DWARVEN_GUARD);
          D = denim;
          E = guard(ENQUIOX);
          K = kamikazedwarf(LORICATUS);
        }
      }
      {
        #################################
        #g----#-g#g-----DE----g#g-#----g#
        #-----#--#-------------#--#-----#
        #-----#--#-----g-g-----#--#-----#
        #-----#--#-------------#--#-----#
        #-----#--#-----g-g-----#--#-----#
        #g---g#--#-------------#--#g---g#
        #######--###############--#######
        #-----#-------------------#-----#
        #-----#-------------------#-----#
        #-----#####################-----#
        #-----#-------------------#-----#
        #-----#-------------------#-----#
        #-----#-------------------#-----#
        #KKKKK#-------------------#-----#
        #################################
      }
    }

    Room
    {
      Size = 7,7;
      AltarPossible = false;
      GenerateFountains = false;
      Shape = ROUND_CORNERS;
      GenerateLanterns = false;

      Square, Pos 3, 2;
      {
        Character = smith(KHARAZ_ARAD) { Flags = IS_MASTER; }
      }

      Square, Pos 3, 3;
      {
        OTerrain = decoration(ANVIL);
      }

      Square, Pos 1, 1;
      {
        Items == lantern { SquarePosition = RIGHT; }
      }

      Square, Pos 5, 1;
      {
        Items == lantern { SquarePosition = LEFT; }
      }

      Square, Pos 5, 1;
      {
        Items == lantern { SquarePosition = DOWN; }
      }

      Square, Pos 1, 1;
      {
        Items == lantern { SquarePosition = DOWN; }
      }

      Square, Pos 1, 5;
      {
        Items == lantern { SquarePosition = UP; }
      }

      Square, Pos 5, 5;
      {
        Items == lantern { SquarePosition = UP; }
      }

      Square, Pos 1, 5;
      {
        Items == lantern { SquarePosition = RIGHT; }
      }

      Square, Pos 5, 5;
      {
        Items == lantern { SquarePosition = LEFT; }
      }
    }
  }
}
