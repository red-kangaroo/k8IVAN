/* Mondedr */

Dungeon MONDEDR;
{
  Levels = 6;
  Description = "Underground Mondedr";
  ShortDescription = "UM";

    LevelDefault
  {
    Size = 40, 40;
    GenerateMonsters = true;
    Rooms = 40;
    Items = 0;
    IsOnGround = false;
    TeamDefault = ATTNAM_TEAM;
    LOSModifier = 16;
    IgnoreDefaultSpecialSquares = false;
    CanGenerateBone = false;
    EnchantmentMinusChanceBase = 0;
    EnchantmentMinusChanceDelta = 0;
    EnchantmentPlusChanceBase = 0;
    EnchantmentPlusChanceDelta = 0;
    BackGroundType = GRAY_FRACTAL;
    FillSquare = GRANITE solidterrain(GROUND), BLACK_GRANITE earth;
    TunnelSquare = GRANITE solidterrain(GROUND), 0;
    IsCatacomb = false;
    DifficultyBase = 0;
    DifficultyDelta = 10;
    MonsterAmountBase = 0;
    MonsterAmountDelta = 5;
    MonsterGenerationIntervalBase = 150;
    MonsterGenerationIntervalDelta = -25;

    RoomDefault
    {
      Pos = 2:XSize-5,2:YSize-5;
      WallSquare = GRANITE solidterrain(GROUND), BLACK_GRANITE wall(BRICK_OLD);
      FloorSquare = GRANITE solidterrain(GROUND), 0;
      DoorSquare = GRANITE solidterrain(GROUND), 0;

      Size = 4:11,4:11;
      AltarPossible = false;
      GenerateDoor = true;
      DivineMaster = 0;
      GenerateTunnel = true;
      GenerateLanterns = false;
      Type = ROOM_NORMAL;
      GenerateFountains = false;
      AllowLockedDoors = false;
      AllowBoobyTrappedDoors = false;
      Shape = RECTANGLE;
      IsInside = true;
      GenerateWindows = false;
      UseFillSquareWalls = false;
      Flags = 0;
    }
  }

  Level 0;
  {
    Size = 61, 67;
    Description = Mondedr;
    ShortDescription = Mondedr;
    FillSquare = solidterrain(GRASS_TERRAIN), 0;
    Size = 61, 67;
    GenerateMonsters = false;
    Rooms = 50:60;
    Items = 0;
    IsOnGround = true;
    TeamDefault = MONDEDR_TEAM;
    LOSModifier = 48;
    IgnoreDefaultSpecialSquares = false;
    CanGenerateBone = false;
    DifficultyBase = 150;
    DifficultyDelta = 0;
    EnchantmentMinusChanceBase = 0;
    EnchantmentMinusChanceDelta = 0;
    EnchantmentPlusChanceBase = 0;
    EnchantmentPlusChanceDelta = 0;
    BackGroundType = GREEN_FRACTAL;

    RoomDefault
    {
      Pos = 2:XSize-5,2:51;
      Size = 4:8,4:8;
      AltarPossible = false;
      WallSquare = solidterrain(GRASS_TERRAIN),wall(BRICK_FINE);
      FloorSquare = solidterrain(PARQUET), 0;
      DoorSquare = solidterrain(PARQUET),door;
      GenerateDoor = true;
      DivineMaster = 0;
      GenerateTunnel = false;
      GenerateLanterns = true;
      Type = ROOM_NORMAL;
      GenerateFountains = false;
      AllowLockedDoors = false;
      AllowBoobyTrappedDoors = false;
      Shape = RECTANGLE;
      IsInside = true;
      GenerateWindows = true;
      UseFillSquareWalls = false;
      Flags = 0;
    }

    Square, Pos 0, 0;
    {
      Character = guard(MONDEDR_GUARD) { WayPoint = { 4, 0, 0, XSize - 1, 0, XSize - 1, YSize - 1, 0, YSize - 1; } }
    }

    Square, Random NOT_IN_ROOM|HAS_NO_OTERRAIN;
    {
      OTerrain = decoration(FIR);
      Times = 100;
    }

    Square, Random NOT_IN_ROOM;
    {
      Character = farmer;
      Times = 5;
    }

    Square, Random NOT_IN_ROOM;
    {
      Character = housewife;
      Times = 5;
    }

    Square, Pos 30,YSize - 1;
    {
      EntryIndex = STAIRS_UP;
    }

    Room
    {
      Pos = 34,33;
      Size = 7,6;
      WallSquare = solidterrain(GRASS_TERRAIN),wall(BRICK_FINE);
      FloorSquare = solidterrain(PARQUET), 0;
      GenerateDoor = false;
      DivineMaster = MELLIS;
      Type = ROOM_SHOP;
      GenerateLanterns = false;
      GenerateWindows = false;

      Square, Pos 3, 5;
      {
        GTerrain = solidterrain(PARQUET);
        OTerrain = door;
      }

      Square, Pos 1, 4;
      {
        Items == ring(RING_OF_FIRE_RESISTANCE);
      }

      Square, Pos 3, 1;
      {
        Character = shopkeeper(MONDEDR) { Flags = IS_MASTER; }
      }

      ItemMap
      {
        Pos = 0,0;
        Size = 7,6;
        Types
        {
          # == 0;
          a == Random { MinPrice = 250; MaxPrice = 2000; Category = HELMET|CLOAK|BODY_ARMOR|BELT|BOOT|GAUNTLET; }
          d == Random { MinPrice = 50; MaxPrice = 2000; Category = RING|AMULET; }
          w == Random { MinPrice = 250; MaxPrice = 2000; Category = WEAPON|SHIELD; }
          e == Random { MinPrice = 10; MaxPrice = 2000; Category = FOOD|POTION; }
          u == Random { MinPrice = 50; MaxPrice = 2000; Category = WAND|TOOL; }
          v == Random { MinPrice = 500; MaxPrice = 2000; }
          l == lantern;
          2 == lantern { SquarePosition = DOWN; }
          3 == lantern { SquarePosition = RIGHT; }
          4 == lantern { SquarePosition = LEFT; }
        }
      }
      {
        ##2#2##
        #aa.ad#
        #wwwwd#
        3uuuvd4
        #.eevd#
        2##.##2
      }
    }

            Square, Pos 36, 39;
    {
      Character = guard(MONDEDR_GUARD);
    }

     Room
        {
          Pos = 16,16;
        Size = 30,16;
        AltarPossible = false;
          GenerateFountains = false;
        Shape = RECTANGLE;

 GTerrainMap
      {
        Pos = 0,0;
        Size = 30,16;
        Types
        {
          # = EBONY_WOOD solidterrain(FLOOR) { IsInside = true; }
          - = 0;
            }
                }
          {
        ##############################
        #---------------#------------#
        #---------------#------------#
        ##############--#------------#
        #------------#--#------------#
        #------------#--#------------#
        #------------#--#------------#
        #------------#--##############
        #------------#---------------#
        #------------#---------------#
        #------------#--##############
        #------------#--#------------#
        #------------#--#------------#
        #------------#--#------------#
        #------------#--#------------#
        ##############################
       }
OTerrainMap
      {
        Pos = 0,0;
        Size = 30,16;

        Types
        {
          # = EBONY_WOOD wall(BRICK_FINE);
                  - = 0;
          | = decoration(CARPET);
          D = EBONY_WOOD door(HEXAGONAL_LOCK);
        }
            }
      {
        ##############################
        #---------------#------------#
        #---------------#------------#
        ######D#######--#------------#
        #------------#--#------------#
        #------------#--#------------#
        #------------#--#------------#
        #------------#--######D#######
        #------------#---------------#
        #------------#---------------#
        #------------#--######D#######
        #------------#--#------------#
        #------------#--#------------#
        #------------#--#------------#
        #------------#--#------------#
        ##############DD##############

    }
CharacterMap
      {
        Pos = 0,0;
        Size = 30,16;

        Types
        {
          # = 0;
                  - = 0;
          g = guard(MONDEDR_GUARD);
        }
            }
      {
        ##############################
        #g--------------#g----------g#
        #g--------------#------------#
        ##############--#------------#
        #g----------g#--#------------#
        #------------#--#------------#
        #------------#--#g----------g#
        #------------#--##############
        #------------#---------------#
        #------------#---------------#
        #------------#--##############
        #------------#--#g----------g#
        #------------#--#------------#
        #------------#--#------------#
        #g----------g#--#g----------g#
        ##############################
   }
       Square, Pos 6,10;
    {
      OTerrain = stairs(STAIRS_DOWN);
      EntryIndex = STAIRS_DOWN;
    }
  }
 }

Level 1;
  {
    Description = Cellar;
    ShortDescription = Cellar;
    Size = 42, 48;
    GenerateMonsters = false;
    Rooms = 1;
    Items = 0;
    IsOnGround = false;
    TeamDefault = MONDEDR_TEAM;
    LOSModifier = 16;
    IgnoreDefaultSpecialSquares = false;
    CanGenerateBone = false;
    DifficultyBase = 150;
    DifficultyDelta = 0;
    EnchantmentMinusChanceBase = 0;
    EnchantmentMinusChanceDelta = 0;
    EnchantmentPlusChanceBase = 0;
    EnchantmentPlusChanceDelta = 0;
    BackGroundType = GRAY_FRACTAL;
    FillSquare = solidterrain(GROUND), MORAINE earth;
    TunnelSquare = solidterrain(GROUND), 0;

    Room
    {
      Size = 38, 44;
      Pos = 2, 2;
      WallSquare = solidterrain(GROUND), 0;
      FloorSquare = solidterrain(GROUND), 0;
      AltarPossible = false;
      GenerateDoor = false;
      DivineMaster = CLEPTIA;
      GenerateTunnel = false;
      GenerateLanterns = false;
      Type = ROOM_NORMAL;
      GenerateFountains = false;
      AllowLockedDoors = false;
      AllowBoobyTrappedDoors = false;
      Shape = RECTANGLE;
      IsInside = true;
      GenerateWindows = false;
      UseFillSquareWalls = false;
      Flags = 0;

      OTerrainMap
      {
        Size = 39, 44;
        Pos = 0, 0;
        Types
        {
          * = MORAINE earth;
          # = BLACK_GRANITE wall(BRICK_OLD);
          @ = IRON barwall;
          $ = IRON barwall(BROKEN_BARWALL);
          % = MARBLE door(BARDOOR) { Parameters = LOCKED; }
          B = MARBLE brokendoor(BARDOOR);
          e = MARBLE wall(BRICK_OLD);
          > = stairs(STAIRS_DOWN);
          < = stairs(STAIRS_UP);
          N = GRANITE wall(BRICK_FINE);
          b = boulder(1);
      D = BLACK_GRANITE door(HEXAGONAL_LOCK);
          X = BLACK_GRANITE wall(BROKEN_WALL);
          I = ironmaiden;
          A = OCTIRON altar(CLEPTIA);
          T = OCTIRON throne;
      | = decoration(CARPET);
      }
      }
      {
        ***************************************
        **########*********###############*****
        **#......#*********#...#...#...#.#*****
        **#......#*********#...#...#...#.#*****
        **#......#*********#@%@#@%@#@%@#.#*****
        **###D####*********#.............#*****
        ****#.#************#######D#######*****
        ****#.#******************#.#***********
        ****#.#******************#.#***********
        ****#.#******************#.#***********
        **###D####*********#######D#######*****
        **#......#*********#.............#*****
        **#......#*********#.............#*****
        **#......#*********#.............#*****
        **#......#*********#.............#*****
        **#......#*********#.............#*****
        **#......#*********#.............#*****
        **#......###########.............#*****
        **#......D.........D......T......#*****
        **#......###########.............#*****
        **#......#*********#.............#*****
        **#......#*********#.............#*****
        **#......#*********#.............#*****
        **#......#*********#.............#*****
        **#......#*********#.............#*****
        **###D####*********######D#D######*****
        ****#.#*************#.....#.....#******
        ****#.#*************#.....#.....#******
        ****#.#*************#.....#.....#******
        ****#.#*************#.....#.....#******
        ****#.#*************#############******
        ****#.#********************************
        ****#.#********************************
        **###D####*********##############******
        **#......#*********#............#******
        **#......###########............#******
        **#......D.........D.....A......#******
        **#......###########............#******
        **#......#*********#............#******
        **########*********##############******
        ***************************************
        ***************************************
        ***************************************
        ***************************************
      }

      ItemMap
      {
        Size = 39, 44;
        Pos = 0, 0;
        Types
        {
          * == 0;
          # == 0;
          1 == lantern { SquarePosition = UP; }
          2 == lantern { SquarePosition = DOWN; }
          3 == lantern { SquarePosition = RIGHT; }
          4 == lantern { SquarePosition = LEFT; }
          r == GRANITE stone;
          b == lantern(BROKEN);
        }
      }
      {
        ***************************************
        **###2####*********#############2#*****
        **#......#*********#...#...#...#.#*****
        **3......4*********#...#...#...#.#*****
        **#......#*********#############.#*****
        **########*********3.............4*****
        ****3.4************#1###########1#*****
        ****#.#******************3*4***********
        ****#.#******************#*#***********
        ****3.4******************3*4***********
        **#2###2##*********#######2#######*****
        **#......#*********#.............#*****
        **#......#*********#.............#*****
        **#......#*********#.............#*****
        **#......#*********#.............#*****
        **3......4*********3.............4*****
        **#......#*********#.............#*****
        **#......#2#######2#.............#*****
        **3......#.........#.............4*****
        **#......#1#######1#.............#*****
        **#......#*********#.............#*****
        **3......4*********3.............4*****
        **#......#*********#.............#*****
        **#......#*********#.............#*****
        **#......#*********#.............#*****
        **#1###1##*********#######1#######*****
        ****3.4*************#.....#.....#******
        ****#.#*************#.....#.....#******
        ****#.#*************#.....#.....#******
        ****#.#*************#.....#.....#******
        ****#.#*************#############******
        ****#.#********************************
        ****3.4********************************
        **########*********######2#######******
        **#......4*********3............#******
        **#......#2#######2#............#******
        **3......#.........#............4******
        **#......#1#######1#............#******
        **#......4*********3............#******
        **###1####*********######1#######******
        ***************************************
        ***************************************
        ***************************************
        ***************************************
      }
          CharacterMap
      {
        Size = 39, 44;
        Pos = 0, 0;
        Types
        {
          * = 0;
          # = 0;
          R = raven { Flags = IS_MASTER; }
          g = guard(MONDEDR_GUARD);
          P = priest(CLEPTIA);
      }
      }
      {
        ***************************************
        **########*********###############*****
        **#......#*********#...#...#...#g#*****
        **#......#*********#...#...#...#.#*****
        **#.g.g..#*********#############.#*****
        **########*********#.............#*****
        ****#.#************###############*****
        ****#.#******************#.#***********
        ****#.#******************#.#***********
        ****#.#******************#.#***********
        **########*********###############*****
        **#.g.g..#*********#g...........g#*****
        **#......#*********#.............#*****
        **#......#*********#.............#*****
        **#......#*********#.............#*****
        **#......#*********#.............#*****
        **#......#*********#.............#*****
        **#.....g###########g............#*****
        **#......#.........#......R......#*****
        **#.....g###########g............#*****
        **#......#*********#.............#*****
        **#......#*********#.............#*****
        **#......#*********#.............#*****
        **#......#*********#.............#*****
        **#.g.g..#*********#g...........g#*****
        **########*********###############*****
        ****#.#*************#.....#.....#******
        ****#.#*************#.....#.....#******
        ****#.#*************#.....#.....#******
        ****#.#*************#.....#.....#******
        ****#.#*************#############******
        ****#.#********************************
        ****#.#********************************
        **########*********##############******
        **#.g.g..#*********#............#******
        **#.....g###########............#******
        **#......#.........#......P.....#******
        **#.....g###########............#******
        **#......#*********#............#******
        **########*********##############******
        ***************************************
        ***************************************
        ***************************************
        ***************************************
      }

    }
    Square, Pos 7,5;
    {
      OTerrain = stairs(STAIRS_UP);
      EntryIndex = STAIRS_UP;
    }
               Square, Pos 32,30;
    {
      OTerrain = stairs(STAIRS_DOWN);
      EntryIndex = STAIRS_DOWN;
    }
  }
    Level 2;
  {
  FillSquare = WATER liquidterrain(UNDERGROUND_LAKE), 0;
  Rooms = 60;
  Items = 0;

      Square, Random;
    {
      Character = rogue { Team = MONSTER_TEAM; }
      Times = 5;
    }

      Square, Random;
    {
      Items == Random { MinPrice = 250; MaxPrice = 2000; }
          Times = 10;
    }

    Square, Random ATTACHABLE;
    {
      OTerrain = stairs(STAIRS_UP);
      EntryIndex = STAIRS_UP;
      AttachRequired = true;
    }

    Square, Random ATTACHABLE;
    {
      OTerrain = stairs(STAIRS_DOWN);
      EntryIndex = STAIRS_DOWN;
      AttachRequired = true;
    }
  }
  Level 3;
  {

        Square, Random;
    {
      Character = rogue { Team = MONSTER_TEAM; }
      Times = 6;
    }

        Square, Random;
    {
      Items == Random { MinPrice = 500; MaxPrice = 2000; }
          Times = 10;
    }

    Square, Random NOT_WALKABLE|ATTACHABLE;
    {
      OTerrain = stairs(STAIRS_UP);
      EntryIndex = STAIRS_UP;
      AttachRequired = true;
    }

    Square, Random NOT_WALKABLE|ATTACHABLE;
    {
      OTerrain = stairs(STAIRS_DOWN);
      EntryIndex = STAIRS_DOWN;
      AttachRequired = true;
    }
  }
    Level 4;
  {

        Square, Random;
    {
      Character = rogue { Team = MONSTER_TEAM; }
      Times = 7;
    }

        Square, Random;
    {
      Character = assassin { Team = MONSTER_TEAM; }
      Times = 1;
    }

        Square, Random;
    {
      Items == Random { MinPrice = 500; MaxPrice = 2000; }
          Times = 10;
    }

    Square, Random NOT_WALKABLE|ATTACHABLE;
    {
      OTerrain = stairs(STAIRS_UP);
      EntryIndex = STAIRS_UP;
      AttachRequired = true;
    }

    Square, Random NOT_WALKABLE|ATTACHABLE;
    {
      OTerrain = stairs(STAIRS_DOWN);
      EntryIndex = STAIRS_DOWN;
      AttachRequired = true;
    }
  }
  Level 5;
  {
      Size = 61, 67;
    GenerateMonsters = false;
    Rooms = 1;
    Items = 0;
    IsOnGround = false;
    TeamDefault = MONDEDR_TEAM;
    LOSModifier = 16;
    IgnoreDefaultSpecialSquares = false;
    CanGenerateBone = false;
    DifficultyBase = 150;
    DifficultyDelta = 0;
    EnchantmentMinusChanceBase = 0;
    EnchantmentMinusChanceDelta = 0;
    EnchantmentPlusChanceBase = 0;
    EnchantmentPlusChanceDelta = 0;
    BackGroundType = GRAY_FRACTAL;
    FillSquare = solidterrain(GROUND), BLACK_GRANITE earth;
    TunnelSquare = solidterrain(GROUND), 0;

   Room
        {
          Pos = 6,6;
        Size = 45, 42;
      WallSquare = solidterrain(GROUND), 0;
      FloorSquare = solidterrain(GROUND), 0;
      AltarPossible = false;
      GenerateDoor = false;
      DivineMaster = CLEPTIA;
      GenerateTunnel = false;
      GenerateLanterns = false;
      Type = ROOM_NORMAL;
      GenerateFountains = false;
      AllowLockedDoors = false;
      AllowBoobyTrappedDoors = false;
      Shape = RECTANGLE;
      IsInside = true;
      GenerateWindows = false;
      UseFillSquareWalls = false;
      Flags = 0;

      GTerrainMap
      {
        Size = 45, 54;
        Pos = 0, 0;
        Types
      {
          * = 0;
          # = 0;
          ~ = WATER liquidterrain(UNDERGROUND_LAKE);
      }
      }
          {
        **************#################**************
        *************##...............##*************
        ************##.................##************
        ***********##...................##***********
        **********##.....................##**********
        **********#.......................#**********
        **********#.......................#**********
        **********#.......................#**********
        **********#~.....................~#**********
        **********#~~...................~~#**********
        **********#~~~.......~.~.......~~~#**********
        **********#~~~~.....~~.~~......~~~#**********
        **********#~~~~~~~~~~...~~~~~~~~~~#**********
        **********#~~~~~~~~~~...~~~~~~~~~~#**********
        **********#~~~......~~.~~......~~~#**********
        **********#~~........~.~........~~#**********
        **********#~.....................~#**********
        **********#.......................#**********
        **********#.......................#**********
        **********#.......................#**********
        **********##.....................##**********
        ***********##...................##***********
        ************##.................##************
        *************##...............##*************
        **************#################**************
        ******************##.....##******************
        ******************#~.....~#******************
        ******************##.....##******************
        ******************#~.....~#******************
        ******************##.....##******************
        ******************#~.....~#******************
        ******************##.....##******************
        **************#################**************
        *#######******#...............#*****########*
        *#.....########...............#######.....#**
        *#.....#......#...............#.....#.....#**
        *#.....#......#...............#.....#.....#**
        *#.....########...............#######.....#**
        *#######******#...............#*****#######**
        **************#################**************
        *******************##..##********************
        *******************#~..~#********************
        *******************##..##********************
        *******************#~..~#********************
        *******************##..##********************
        ******************########*******************
        ******************#......#*******************
        ******************#......#*******************
        ******************#......#*******************
        ******************#......#*******************
        ******************#......#*******************
        ******************#......#*******************
        ******************#......#*******************
        ******************########*******************



       }
      OTerrainMap
      {
        Size = 45, 54;
        Pos = 0, 0;
        Types
        {
          * = BLACK_GRANITE earth;
          # = BLACK_GRANITE wall(BRICK_OLD);
          @ = IRON barwall;
          $ = IRON barwall(BROKEN_BARWALL);
          % = MARBLE door(BARDOOR) { Parameters = LOCKED; }
          B = MARBLE brokendoor(BARDOOR);
          e = MARBLE wall(BRICK_OLD);
          > = stairs(STAIRS_DOWN);
          < = stairs(STAIRS_UP);
          N = GRANITE wall(BRICK_FINE);
          b = boulder(1);
      D = BLACK_GRANITE door(HEXAGONAL_LOCK);
          X = BLACK_GRANITE wall(BROKEN_WALL);
          I = ironmaiden;
          A = OCTIRON altar(CLEPTIA);
          T = OCTIRON throne;
      1 = decoration(POOL_CORNER) { VisualEffects = NONE; }
      2 = decoration(POOL_CORNER) { VisualEffects = MIRROR; }
      3 = decoration(POOL_CORNER) { VisualEffects = MIRROR | FLIP; }
      4 = decoration(POOL_CORNER) { VisualEffects = FLIP; }
      5 = decoration(POOL_BORDER) { VisualEffects = NONE; }
      6 = decoration(POOL_BORDER) { VisualEffects = ROTATE; }
      7 = decoration(POOL_BORDER) { VisualEffects = FLIP; }
      8 = decoration(POOL_BORDER) { VisualEffects = MIRROR | ROTATE; }
      | = decoration(CARPET);
      }
      }
          {
        **************#################**************
        *************##...............##*************
        ************##.................##************
        ***********##...................##***********
        **********##.....................##**********
        **********#...........T...........#**********
        **********#.......................#**********
        **********#.......................#**********
        **********#.......................#**********
        **********#.......................#**********
        **********#.......................#**********
        **********#.......................#**********
        **********#.......................#**********
        **********#@@@@@@@@@@...@@@@@@@@@@#**********
        **********#.......................#**********
        **********#.......................#**********
        **********#.......................#**********
        **********#.......................#**********
        **********#.......................#**********
        **********#.......................#**********
        **********##.....................##**********
        ***********##...................##***********
        ************##.................##************
        *************##...............##*************
        **************########D########**************
        ******************##.....##******************
        ******************#.......#******************
        ******************##.....##******************
        ******************#.......#******************
        ******************##.....##******************
        ******************#.......#******************
        ******************##.....##******************
        **************########D########**************
        ########******#...............#*****#########
        #......########...............#######.......#
        #......D......D...............D.....D.......#
        #......D......D...............D.....D.......#
        #......########...............#######.......#
        ########******#...............#*****#########
        **************#######DD########**************
        *******************##..##********************
        *******************#....#********************
        *******************##..##********************
        *******************#....#********************
        *******************##..##********************
        ******************###DD###*******************
        ******************#......#*******************
        ******************#......#*******************
        ******************#......#*******************
        ******************#......#*******************
        ******************#......#*******************
        ******************#......#*******************
        ******************#......#*******************
        ******************########*******************



       }
CharacterMap
      {
        Pos = 0,0;
        Size = 45, 54;

        Types
        {
                  * = 0;
          # = 0;
                  - = 0;
                B = blinkdog { Team = MONSTER_TEAM; }
                F = floatingeye { Team = MONSTER_TEAM; }
          A = assassin { Team = MONSTER_TEAM; }
                  V = vulcan { Team = MONSTER_TEAM; }
                S = invisiblestalker { Team = MONSTER_TEAM; }
                f = frog(DARK) { Team = MONSTER_TEAM; }
        }
            }
      {
        **************#################**************
        *************##...............##*************
        ************##.................##************
        ***********##...................##***********
        **********##.....................##**********
        **********#.........F.V.F.........#**********
        **********#.......................#**********
        **********#.......................#**********
        **********#.......................#**********
        **********#.......................#**********
        **********#.......................#**********
        **********#.......................#**********
        **********#f.....................f#**********
        **********#..........f.f..........#**********
        **********#f.....................f#**********
        **********#.......................#**********
        **********#.......................#**********
        **********#.......................#**********
        **********#.......................#**********
        **********#.......................#**********
        **********##.....................##**********
        ***********##...................##***********
        ************##.................##************
        *************##....A.....A....##*************
        **************#################**************
        ******************##f...f##******************
        ******************#.......#******************
        ******************##.....##******************
        ******************#.......#******************
        ******************##.....##******************
        ******************#.......#******************
        ******************##.....##******************
        **************#################**************
        ########******#S.............S#*****#########
        #......########...............#######.......#
        #......#......#...............#.....#.......#
        #......#......#...............#.....#.......#
        #......########...............#######.......#
        ########******#S.............S#*****#########
        **************#################**************
        *******************##..##********************
        *******************#....#********************
        *******************##..##********************
        *******************#....#********************
        *******************##..##********************
        ******************########*******************
        ******************#......#*******************
        ******************#......#*******************
        ******************#......#*******************
        ******************#......#*******************
        ******************#......#*******************
        ******************#......#*******************
        ******************#......#*******************
        ******************########*******************
   }
   ItemMap
      {
        Pos = 0,0;
        Size = 45, 54;

        Types
        {
                  * == 0;
          # == 0;
                  - == 0;
                  1 == lantern { SquarePosition = UP; }
          2 == lantern { SquarePosition = DOWN; }
          3 == lantern { SquarePosition = RIGHT; }
          4 == lantern { SquarePosition = LEFT; }
        }
            }
      {
        **************#######2#2#######**************
        *************##...............##*************
        ************##.................##************
        ***********##...................##***********
        **********##.....................##**********
        **********#.......................#**********
        **********#.......................#**********
        **********#.......................#**********
        **********#.......................#**********
        **********#.......................#**********
        **********#.......................#**********
        **********#.......................#**********
        **********3.......................4**********
        **********#.......................#**********
        **********3.......................4**********
        **********#.......................#**********
        **********#.......................#**********
        **********#.......................#**********
        **********#.......................#**********
        **********#.......................#**********
        **********##.....................##**********
        ***********##...................##***********
        ************##.................##************
        *************##...............##*************
        **************#######1#1#######**************
        ******************##.....##******************
        ******************3.......4******************
        ******************##.....##******************
        ******************3.......4******************
        ******************##.....##******************
        ******************3.......4******************
        ******************##.....##******************
        **************#################**************
        ########******#...............#*****#########
        #......#2####2#...............#2###2#.......#
        #......#......#...............#.....#.......#
        #......#......#...............#.....#.......#
        #......#1####1#...............#1###1#.......#
        ########******#...............#*****#########
        **************#################**************
        *******************##..##********************
        *******************#....#********************
        *******************##..##********************
        *******************#....#********************
        *******************##..##********************
        ******************########*******************
        ******************#......#*******************
        ******************#......#*******************
        ******************#......#*******************
        ******************#......#*******************
        ******************#......#*******************
        ******************#......#*******************
        ******************#......#*******************
        ******************########*******************
   }
          Square, Pos 22,36;
    {
      OTerrain = stairs(STAIRS_UP);
      EntryIndex = STAIRS_UP;
    }
  }
  }

}
